#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define MAX 5

int totalPhilosophers;

// Helper to check adjacency in a circular table
int is_adjacent(int a, int b, int total) {
    return (abs(a - b) == 1 || abs(a - b) == (total - 1));
}

void eat(int p) {
    printf("P %d is granted to eat\n", p);
    sleep(1); // Simulate eating
    printf("P %d has finished eating\n", p);
}

void one_can_eat(int hungryPhilos[], int count) {
    // Print all hungry philosophers as waiting once
    for (int i = 0; i < count; i++) {
        printf("P %d is waiting\n", hungryPhilos[i]);
    }

    // One by one, allow each philosopher to eat
    for (int i = 0; i < count; i++) {
        eat(hungryPhilos[i]);
    }
}

void two_can_eat(int hungryPhilos[], int count) {
    // Print all as waiting first
    for (int i = 0; i < count; i++) {
        printf("P %d is waiting\n", hungryPhilos[i]);
    }

    int eaten[MAX] = {0}; // Keep track of who has eaten

    for (int i = 0; i < count; i++) {
        if (eaten[i]) continue;

        int first = hungryPhilos[i];
        int found_pair = 0;

        for (int j = i + 1; j < count; j++) {
            if (eaten[j]) continue;
            int second = hungryPhilos[j];

            if (!is_adjacent(first, second, totalPhilosophers)) {
                // Allow both to eat
                printf("P %d is granted to eat\n", first);
                printf("P %d is granted to eat\n", second);
                sleep(1);
                printf("P %d has finished eating\n", first);
                printf("P %d has finished eating\n", second);
                eaten[i] = 1;
                eaten[j] = 1;
                found_pair = 1;
                break;
            }
        }

        if (!found_pair) {
            // Eat alone if no non-adjacent pair found
            eat(first);
            eaten[i] = 1;
        }
    }
}

int main() {
    int choice, numHungry, hungryPhilos[MAX];

    printf("Enter the total number of philosophers: ");
    scanf("%d", &totalPhilosophers);

    printf("How many are hungry: ");
    scanf("%d", &numHungry);

    for (int i = 0; i < numHungry; i++) {
        printf("Enter philosopher %d position (1 to %d): ", i + 1, totalPhilosophers);
        scanf("%d", &hungryPhilos[i]);
    }

    while (1) {
        printf("\n1. One can eat at a time\n");
        printf("2. Two can eat at a time\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Allow one philosopher to eat at any time\n");
                one_can_eat(hungryPhilos, numHungry);
                break;
            case 2:
                printf("Allow two philosophers to eat at any time\n");
                two_can_eat(hungryPhilos, numHungry);
                break;
            case 3:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}
